#Hairdresser Problem V3
import simpy
import random
import statistics
import math 
import matplotlib.pyplot as plt



class Hairdresser(object):
    def __init__(self, env, workers, p_HandS, busyness):
        self.env = env
        self.workers = simpy.Resource(env, workers)
        self.p_HandS = p_HandS
        self.busyness = busyness
            
    def job(self, customer):
        p = self.p_HandS 
        r = random.randint(0,100)
        
        if p < r:
            yield self.env.timeout(10)
        
        else:
            yield self.env.timeout(20)
        
                


def go_to_hairdresser(env, customer, hairdresser):
    
    arrival_time = env.now
    
    with hairdresser.workers.request() as request:
        yield request
        yield env.process(hairdresser.job(customer))
        
    wait_times.append(env.now - arrival_time)
    leave_times.append(env.now)



def run_hairdresser(env, workers, p_HandS, busyness):
    hairdresser = Hairdresser(env, workers, p_HandS, busyness)
    
    customer = 0

    while True:
        a = busyness/10
        b = (a * math.exp(-(((env.now/60) - 4) ** 2) / 10)) * 10
        R = random.randint(0, 100)
            
        if R < b:
            customer += 1
            env.process(go_to_hairdresser(env, customer, hairdresser))
            
            yield env.timeout(1)
            
        else:
            yield env.timeout(1)
        
    

def get_average_wait_time(wait_times):
    average_wait = statistics.mean(wait_times)
        
    minutes, frac_minutes = divmod(average_wait, 1)
    seconds = frac_minutes * 60
    return round(minutes), round(seconds)



def get_user_input():
    num_employees = input("Input number of employees working: ")
    p_HandS = input("Input % chance customer will want a haircut and shampoo: ")
    busyness = input("At its peak, what is the % chance that a customer will enter the store every minute?, ")
    
    params = [num_employees, p_HandS, busyness]
    
    if all(str(i).isdigit for i in params):
        params = [int(x) for x in params]
    
    else: 
        print("Could not parse input. Using default values (1 and 0.5).")
        params = [1, 50, 30]

    return params



def main():
    random.seed(38)
    
    workers, p_HandS, busyness = get_user_input()
    
    env = simpy.Environment()
    
    env.process(run_hairdresser(env, workers, p_HandS, busyness))
    
    env.run(until = 180)
    
    mins, secs = get_average_wait_time(wait_times)
    
    print("Running simulation...", 
          f"\nThe average wait time is {mins} minutes and {secs} seconds.",)
    
    xdata = leave_times
    ydata = wait_times
    plt.plot(xdata, ydata, "o")
    plt.show()

    
#%%

if __name__ == "__main__":
    wait_times = []
    leave_times = []
    main()
    

    
    


    